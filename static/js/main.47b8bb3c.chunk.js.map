{"version":3,"sources":["components/Card/Card.js","api/getFetch.js","components/Loader/Loader.jsx","helpers/getPageCount.js","components/pagination/pagination.js","components/Navigation/Navigation.jsx","routes/index.js","router/RouterHome/RouterHome.js","components/About/About.jsx","components/Details/Detail.js","App.js","index.js"],"names":["Card","id","imgUrl","title","year","genres","summary","className","to","pathname","state","src","alt","slice","FetchRequest","limit","page","fetch","response","res","json","Loader","getPageCount","totalCount","Math","ceil","Pagination","totalPages","currentPage","pageClick","leftClick","rightClick","pages","useState","pageLimit","maxPageLimit","setMaxPageLimit","minPageLimit","setMinPageLimit","i","push","renderPagination","map","el","onClick","Navigation","routes","path","component","loading","setLoading","movies","setMovies","setPage","setTotalPages","getFilms","a","posts","getAllPosts","data","movie_count","useEffect","medium_cover_image","itemsPerView","e","console","log","target","dataset","value","Number","exact","props","location","undefined","history","App","route","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47b8bb3c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Card.css\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nCard.propTypes = {\r\n\r\n    imgUrl: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string)\r\n\r\n}\r\n\r\n\r\nfunction Card({ id, imgUrl, title, year, genres, summary }) {\r\n\r\n    return (<div className=\"card\">\r\n        <Link\r\n            to={{\r\n                pathname: `/movie/${id}`,\r\n                state: {\r\n                    id,\r\n                    imgUrl,\r\n                    title,\r\n                    year,\r\n                    genres,\r\n                    summary\r\n                }\r\n\r\n            }}>\r\n\r\n            <div className=\"card-top\" >\r\n                <img src={imgUrl} alt=\"poster\" />\r\n            </div>\r\n            <div className=\"card-bottom\">\r\n                <p className=\"card-title\">{title}</p>\r\n                <p className=\"card-year\">{year}</p>\r\n                <p className=\"card-genres\">{genres}</p>\r\n                <p className=\"card-summary\">{summary.slice(0, 140)}</p>\r\n            </div>\r\n\r\n        </Link>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport { Card }","\r\n class FetchRequest {\r\n    \r\n  static  async getAllPosts(limit = 10, page = 1) {\r\n        const response =  (await fetch(`https://yts.mx/api/v2/list_movies.json?limit=${limit}&page=${page}`))\r\n        // const {data: {movies}} = await response.json()\r\n        const res = response.json()\r\n        return res;\r\n    }\r\n  \r\n }\r\n\r\nexport {FetchRequest}\r\n","\r\nimport \"./Loader.css\"\r\n\r\nfunction Loader() {\r\n    return <div className=\"loader-wrapper\">\r\n        <div className=\"loader\">\r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport { Loader }","function getPageCount(totalCount, limit) {\r\n    return Math.ceil(totalCount / limit)\r\n}\r\n\r\nexport {getPageCount}","import { useState } from \"react\";\r\n\r\nimport \"./pagination.css\"\r\n\r\nconst Pagination = ({totalPages, currentPage, pageClick, leftClick, rightClick}) => {\r\n    const pages =[];\r\n   const [pageLimit, setPageLimit] = useState(5)\r\n   const [maxPageLimit, setMaxPageLimit] = useState(5)\r\n   const [minPageLimit, setMinPageLimit] = useState(0)\r\n   \r\n   for(let i = 1; i <= totalPages; i++) {\r\n        pages.push(i);\r\n    }\r\n    \r\n    // const indexOfLastItem = currentPage * itemsPerView\r\n    // const indexxOfFirstItem = indexOfLastItem - itemsPerView;\r\n    // const currentItems = pages.slice(indexxOfFirstItem, indexOfLastItem)\r\n\r\n    \r\n    \r\n    const renderPagination = pages.map((el,) => {\r\n     \r\n        if(el < maxPageLimit + 1 && el > minPageLimit) {\r\n            return (\r\n                <div key = {el} data-value ={el} className = {currentPage == el? \"active\": \"pagination-element\" } onClick = {pageClick}>{el}</div>\r\n            )\r\n    \r\n        }\r\n       \r\n   })\r\n   \r\n      if(currentPage > maxPageLimit) {\r\n        setMaxPageLimit(maxPageLimit + pageLimit)\r\n        setMinPageLimit(minPageLimit + pageLimit)\r\n    }\r\n\r\n    if((currentPage -1) < minPageLimit) {\r\n        setMaxPageLimit(maxPageLimit - pageLimit)\r\n        setMinPageLimit(minPageLimit - pageLimit)\r\n    }\r\n\r\n\r\n    return <div className = \"pagination\">\r\n        <div className=\"pagination-element\" onClick = {leftClick}>prev</div>\r\n        {renderPagination}\r\n        <div className=\"pagination-element\" onClick = {rightClick}>next</div>\r\n    </div>\r\n\r\n}\r\n\r\n\r\n\r\nexport {Pagination}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function Pagination(totalPages, currentPage, pagePerView = 0) {\r\n    //     const LEFT_PAGE = 'LEFT';\r\n    //     const RIGHT_PAGE = 'RIGHT';\r\n    //     let pages = [];\r\n    \r\n    \r\n    //     const totalNumbers = (pagePerView * 2) + 3;      //  totalNumbers: the total page numbers to show on the control                 \r\n    //     const totalBlocks = totalNumbers + 2;         //  totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\r\n         \r\n       \r\n    \r\n    //     if(totalPages > totalBlocks){\r\n    //         const startPage = Math.max(2, currentPage - pagePerView);\r\n    //         const endPage = Math.min(totalPages-1, currentPage + pagePerView);\r\n    //         pages = range(startPage, endPage);\r\n          \r\n    //         // console.log(`totalPages ${totalPages}`)\r\n    //         // console.log(`pagePerView ${pagePerView}`)\r\n    //         // console.log(`currentPage ${currentPage}`)\r\n    //         // console.log(`start ${startPage}`)\r\n    //         // console.log(`end ${endPage}`)\r\n    //         // console.log(`pages ${pages}`)\r\n    \r\n    //         const hasLeftSpill = startPage > 2;                     // * hasLeftSpill: has hidden pages to the left\r\n    //         const hasRightSpill = (totalPages - endPage) > 1;       // * hasRightSpill: has hidden pages to the right\r\n    //         const spillOffset = totalNumbers - (pages.length + 1);  // * spillOffset: number of hidden pages either to the left or to the right\r\n    //         // console.log(`hasleft ${hasLeftSpill}`)\r\n    //         // console.log(`hasright ${hasRightSpill}`)\r\n    //         // console.log(`spillOfset ${spillOffset}`)\r\n    //         switch(true) {\r\n    //             case (hasLeftSpill && !hasRightSpill): {\r\n    //                 const extraPages = range(startPage - spillOffset, startPage-1);\r\n    //                 pages = [LEFT_PAGE, ...extraPages, ...pages];\r\n    //                 console.log(`pages ${pages}`)\r\n    //                 break;\r\n    //             }\r\n    //             case (!hasLeftSpill && hasRightSpill): {\r\n    //                 const extraPages = range(endPage  +1, endPage + spillOffset);\r\n    //                 pages = [...pages, ...extraPages, RIGHT_PAGE];\r\n    //                 console.log(`pages ${pages}`)\r\n    //                 break;\r\n    //             }\r\n    //             case (hasLeftSpill && hasRightSpill): \r\n    //             default: {\r\n                    \r\n    //                 pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\r\n    //                 console.log(`pages ${pages}`)\r\n    //                 break;\r\n    //             }\r\n    //         }\r\n    \r\n    //         return [1, ...pages, totalPages];\r\n            \r\n    //     }\r\n    //     return range(1, totalPages);\r\n    // }","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\"\r\n\r\nfunction Navigation() {\r\n    return <div className=\"nav\">\r\n        <Link to=\"/\"> Главная</Link>\r\n        <Link to=\"/about\"> О проекте</Link>\r\n\r\n    </div>\r\n}\r\n\r\nexport { Navigation }","import {RouterHome} from '../router/RouterHome/RouterHome'\r\nimport {About} from \"../components/About/About\"\r\nimport {Detail} from '../components/Details/Detail'\r\n\r\nconst routes = [\r\n    {path: '/', component: RouterHome, exact: true },\r\n    {path: '/about', component: About, exact: true },\r\n    {path: '/movie/:id', component: Detail, exact: true },\r\n]\r\n\r\nexport {routes}","import {React, useState, useEffect} from \"react\";\r\nimport './RouterHome.css';\r\nimport { Card } from \"../../components/Card/Card\";\r\nimport {FetchRequest} from \"../../api/getFetch\"\r\nimport {Loader} from \"../../components/Loader/Loader\"\r\nimport {getPageCount} from \"../../helpers/getPageCount\"\r\nimport {Pagination } from \"../../components/pagination/pagination\"\r\n// import {RenderPagination} from \"../../components/pagination/paginationRender\"\r\n\r\n\r\nfunction RouterHome(){\r\n    const [loading, setLoading] = useState(true);\r\n    const [movies, setMovies] = useState([])\r\n    const [limit, setLimit] = useState(10);\r\n    const [page, setPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(0);\r\n    // let arr = pagination(totalPages, page);\r\n\r\n    const getFilms = async () => {\r\n        setLoading(true);\r\n        const posts = FetchRequest.getAllPosts(limit, page)\r\n        const {data} = await posts;\r\n        setMovies(data.movies)\r\n        setTotalPages( getPageCount(data.movie_count, limit)) \r\n        setLoading(false);\r\n    }\r\n   \r\n    const rightClick = (e) => {\r\n        console.log('right')\r\n        setPage(page + 1)\r\n    }\r\n    const leftClick = (e) => {\r\n        console.log('left')\r\n        if(page > 0) {\r\n\r\n            setPage(page - 1)\r\n        }\r\n       \r\n    }\r\n    const pageClick = (e) => {\r\n        console.log(e.target.dataset.value)\r\n        setPage(Number(e.target.dataset.value))\r\n        \r\n    }\r\n    useEffect(() => {\r\n\r\n            getFilms()\r\n\r\n    },[page] )\r\n\r\n    \r\n\r\n    if(loading) {\r\n        return <Loader/>\r\n    }\r\n    return <div className = 'container'> \r\n    <div className=\"cards\">\r\n    {movies.map((el)=> {\r\n       return <Card \r\n       key = {el.id} \r\n       id = {el.id}\r\n       imgUrl = {el.medium_cover_image}\r\n       title = {el.title}\r\n       year = {el.year}\r\n       genres = {el.genres}\r\n       summary = {el.summary}\r\n       />\r\n       \r\n    })}</div>\r\n    <Pagination \r\n     totalPages = {totalPages} \r\n     itemsPerView = {limit}\r\n     currentPage ={page}\r\n     pageClick = {pageClick}\r\n     leftClick = {leftClick}\r\n     rightClick = {rightClick}/>\r\n\r\n\r\n    {/* <RenderPagination\r\n    total = {totalPages}\r\n    current = {page}\r\n    pagePerview = {0}\r\n    rightClick = {rightClick}\r\n    leftClick = {leftClick}\r\n    pageClick = {pageClick}\r\n    ></RenderPagination> */}\r\n  \r\n </div>\r\n   \r\n     \r\n        \r\n    \r\n\r\n}\r\n\r\n\r\nexport {RouterHome}","import React from \"react\";\r\n\r\n\r\nfunction About() {\r\n    return <div>Ab</div>\r\n}\r\n\r\nexport { About }","import {React, useEffect} from \"react\";\r\nimport {Card} from \"../Card/Card\"\r\n\r\nfunction Detail(props) {\r\n    const data = props.location.state;\r\n\r\n    useEffect(() =>{\r\n        if(data === undefined) {\r\n            props.history.push('/')\r\n        }\r\n    }, [])\r\n\r\n    if(data === undefined) {\r\n        return 0;\r\n    }else {\r\n        console.log(data)\r\n        return <div className= \"container\">\r\n            <Card  \r\n            id = {data.id} \r\n            imgUrl = {data.imgUrl}\r\n            title = {data.title}\r\n            year = {data.year}\r\n            genres = {data.genres}\r\n            summary = {data.summary}>\r\n         \r\n            </Card>\r\n        </div>\r\n    }\r\n    \r\n}\r\n\r\nexport {Detail}","import {React} from \"react\";\r\nimport {RouterHome} from './router/RouterHome/RouterHome'\r\nimport {About} from \"./components/About/About\"\r\nimport {Navigation} from \"./components/Navigation/Navigation\"\r\nimport {Detail} from \"./components/Details/Detail\"\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport { routes } from \"./routes/index\";\r\n\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return <>\r\n    <HashRouter>\r\n        <Navigation/>\r\n    {routes.map((route)=>{\r\n       return <Route key = {route.path} component = {route.component} path = {route.path} exact = {route.exact} />\r\n    })}\r\n    </HashRouter>\r\n    </>\r\n    }\r\n\r\n \r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}